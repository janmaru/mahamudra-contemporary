name: Build and Publish to NuGet

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

      - name: Pack
        run: dotnet pack src/Core/Contemporary/Contemporary.csproj --configuration Release --no-build --output ./artifacts
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts/*.nupkg

  publish:
    name: Publish to NuGet
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish to NuGet
        run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  publish-on-version-change:
    name: Publish on Version Change (Push to Master)
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Check if version changed
        id: version-check
        run: |
          # Get current version from project file
          CURRENT_VERSION=$(grep '<Version>' src/Core/Contemporary/Contemporary.csproj | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/' | tr -d '[:space:]')
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this version exists on NuGet
          RESPONSE=$(curl -s "https://api.nuget.org/v3-flatcontainer/mahamudra.contemporary/index.json" | jq -r '.versions[]' | grep "^$CURRENT_VERSION$" || echo "")
          
          if [ -z "$RESPONSE" ]; then
            echo "Version $CURRENT_VERSION not found on NuGet. Will publish."
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version $CURRENT_VERSION already exists on NuGet. Skipping publish."
            echo "should-publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Download artifacts
        if: steps.version-check.outputs.should-publish == 'true'
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts

      - name: Publish to NuGet
        if: steps.version-check.outputs.should-publish == 'true'
        run: |
          echo "Publishing version ${{ steps.version-check.outputs.version }} to NuGet"
          dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Create and push tag
        if: steps.version-check.outputs.should-publish == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${{ steps.version-check.outputs.version }}"
          git push origin "v${{ steps.version-check.outputs.version }}"
